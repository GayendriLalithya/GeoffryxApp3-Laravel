* STORED PROCEDURES *
---------------------

1. To Change the User type to professional in user table, create a record in professional table and notification table and update the verify table status to Verified when accepting a verification request.

DELIMITER $$

CREATE PROCEDURE AcceptVerification(IN verify_id_param INT)
BEGIN
    DECLARE user_id_param INT;
    DECLARE professional_type_param VARCHAR(255);

    -- Fetch user_id and professional_type from the verification request
    SELECT user_id, professional_type
    INTO user_id_param, professional_type_param
    FROM verify_requests
    WHERE verify_id = verify_id_param;

    -- Update the status of the verification request
    UPDATE verify_requests
    SET status = 'verified'
    WHERE verify_id = verify_id_param;

    -- Insert a notification for the user
    INSERT INTO notifications (
        user_id, 
        title, 
        message, 
        status, 
        created_at, 
        updated_at
    )
    VALUES (
        user_id_param, 
        'Account Verified', 
        'Your professional account request has been approved by Geoffryx. Welcome to Geoffryx professionals!', 
        'unread', 
        NOW(), 
        NOW()
    );

    -- Update the user's type in the users table
    UPDATE users
    SET user_type = 'professional'
    WHERE user_id = user_id_param;

    -- Insert a new record into the professionals table
    INSERT INTO professionals (
        user_id, 
        type, 
        availability, 
        work_location, 
        payment_min, 
        payment_max, 
        preferred_project_size, 
        created_at, 
        updated_at
    )
    VALUES (
        user_id_param, 
        professional_type_param, 
        'Available', 
        'anywhere', 
        20000000, 
        100000000, 
        'all', 
        NOW(), 
        NOW()
    );
END$$

DELIMITER ;

2. Stored procedure for displaying professionals with loading their information

DELIMITER //

CREATE PROCEDURE LoadProfessionalDetails(IN prof_id INT)
BEGIN
    -- Fetch professional details including basic info and profile picture
    SELECT * FROM professional_details WHERE professional_id = prof_id;

    -- Fetch average ratings for the professional
    SELECT * FROM professional_ratings WHERE professional_id = prof_id;

    -- Fetch work history for the professional
    SELECT * FROM professional_work_history WHERE professional_id = prof_id;
END //

DELIMITER ;

3. Stored procedure to load all the professional information

DELIMITER //

CREATE PROCEDURE LoadAllProfessionals()
BEGIN
    SELECT p.professional_id, p.user_id, u.name, p.type, p.work_location, 
           pp.profile_pic AS profile_picture_url, r.average_rating
    FROM professionals p
    JOIN users u ON p.user_id = u.user_id
    LEFT JOIN profile_picture pp ON u.user_id = pp.user_id
    LEFT JOIN (
        SELECT professional_id, AVG(rate) AS average_rating
        FROM rating
        GROUP BY professional_id
    ) r ON p.professional_id = r.professional_id;
END //

DELIMITER ;

4. stored procedure to create project with selected professionals

DELIMITER $$

CREATE PROCEDURE create_project_with_professionals(
    IN p_user_id BIGINT,
    IN p_name VARCHAR(255),
    IN p_location VARCHAR(255),
    IN p_start_date DATE,
    IN p_end_date DATE,
    IN p_budget DECIMAL(10,2),
    IN p_description TEXT,
    IN p_professionals JSON
)
BEGIN
    DECLARE project_id BIGINT;
    DECLARE professional_user_id BIGINT;
    DECLARE invalid_professional BOOLEAN DEFAULT FALSE;
    DECLARE idx INT DEFAULT 0;
    DECLARE total_profs INT;

    -- Get the total number of professionals in the JSON array
    SET total_profs = JSON_LENGTH(p_professionals);

    -- Check each professional_id in the JSON array
    WHILE_LOOP: WHILE idx < total_profs DO
        SET professional_user_id = (
            SELECT user_id
            FROM professionals
            WHERE professional_id = JSON_UNQUOTE(JSON_EXTRACT(p_professionals, CONCAT('$[', idx, ']')))
            LIMIT 1
        );

        -- If the professional's user_id matches the project creator's user_id
        IF professional_user_id = p_user_id THEN
            SET invalid_professional = TRUE;
            LEAVE WHILE_LOOP; -- Exit the labeled WHILE loop
        END IF;

        SET idx = idx + 1;
    END WHILE WHILE_LOOP;

    -- If any professional is invalid, throw an error and do not insert
    IF invalid_professional THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot select yourself as a professional for the project.';
    END IF;

    -- Insert project details into the 'work' table
    INSERT INTO work (user_id, name, location, start_date, end_date, budget, description, created_at, updated_at)
    VALUES (p_user_id, p_name, p_location, p_start_date, p_end_date, p_budget, p_description, NOW(), NOW());

    SET project_id = LAST_INSERT_ID();

    -- Insert professionals into 'pending_professional' table
    INSERT INTO pending_professional (user_id, professional_id, work_id, professional_status, created_at, updated_at)
    SELECT p_user_id, JSON_UNQUOTE(JSON_EXTRACT(p_professionals, CONCAT('$[', idx2.i, ']'))), project_id, 'pending', NOW(), NOW()
    FROM (
        SELECT 0 AS i UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5
    ) idx2
    WHERE JSON_UNQUOTE(JSON_EXTRACT(p_professionals, CONCAT('$[', idx2.i, ']'))) IS NOT NULL;

END$$

DELIMITER ;

5. Stored procedure to create a member record when aceepted the work by a professional

DELIMITER $$

CREATE PROCEDURE AcceptWorkAndAddToTeam(
    IN workId INT,
    IN userId INT
)
BEGIN
    DECLARE teamId INT;

    -- Update status in pending_professional table
    UPDATE pending_professional
    SET professional_status = 'accepted'
    WHERE work_id = workId
    AND professional_id = (SELECT professional_id FROM professionals WHERE user_id = userId);

    -- Get the team ID for the work ID
    SELECT team_id INTO teamId
    FROM team
    WHERE work_id = workId;

    -- Add record to team_members table
    INSERT INTO team_members (user_id, team_id, status, created_at, updated_at)
    VALUES (userId, teamId, 'not stated', NOW(), NOW());
END$$

DELIMITER ;

6. Stored Procedure to handle work rejection by the professional

DELIMITER $$

CREATE PROCEDURE RejectWork(
    IN workId INT,
    IN professionalId INT,
    IN rejectionReason TEXT
)
BEGIN
    DECLARE userId INT;
    DECLARE professionalName VARCHAR(255);

    -- Update status in pending_professional table
    UPDATE pending_professional
    SET professional_status = 'rejected'
    WHERE work_id = workId
    AND professional_id = professionalId;

    -- Get the user_id from the work table
    SELECT user_id INTO userId
    FROM work
    WHERE work_id = workId;

    -- Get the professional name
    SELECT name INTO professionalName
    FROM users
    WHERE user_id = (SELECT user_id FROM professionals WHERE professional_id = professionalId);

    -- Insert notification into the notifications table
    INSERT INTO notifications (user_id, title, message, status, created_at, updated_at)
    VALUES (
        userId,
        'Project Rejection',
        CONCAT('Your project has been rejected by ', professionalName, '. The reason is: ', rejectionReason),
        'unread',
        NOW(),
        NOW()
    );
END$$

DELIMITER ;

7. Stored procedure to get team members by the team id from team-modal page

DELIMITER $$

CREATE PROCEDURE GetTeamMembersByTeamId(IN teamId INT)
BEGIN
    SELECT 
        tm.team_member_id,
        tm.user_id,
        u.name AS member_name,
        tm.status AS member_status,
        tm.amount AS task_amount,
        p.type AS professional_type
    FROM 
        team_members tm
    JOIN 
        users u ON tm.user_id = u.user_id
    LEFT JOIN 
        professionals p ON tm.user_id = p.user_id
    WHERE 
        tm.team_id = teamId;
END$$

DELIMITER ;

8. stored procedure for the payment process

DELIMITER $$

CREATE PROCEDURE ProcessPayment(
    IN p_work_id INT,
    IN p_user_id INT,
    IN p_amount DECIMAL(10, 2)
)
BEGIN
    -- Create a payment record
    INSERT INTO payment (work_id, user_id, amount, date, time, created_at, updated_at)
    VALUES (p_work_id, p_user_id, p_amount, CURDATE(), CURTIME(), NOW(), NOW());

    -- Send notification to the customer
    INSERT INTO notifications (user_id, title, message, status, created_at, updated_at)
    VALUES (p_user_id, 'Payment Successful', 'Your payment has been successfully processed.', 'unread', NOW(), NOW());
END $$

DELIMITER ;

9. stored procedure to add ratings upon project completion

DELIMITER $$

CREATE PROCEDURE submit_ratings(
    IN p_work_id BIGINT,
    IN p_user_id BIGINT,
    IN p_ratings JSON
)
BEGIN
    DECLARE idx INT DEFAULT 0;
    DECLARE total_ratings INT;
    DECLARE professional_id BIGINT;
    DECLARE rate ENUM('1', '2', '3', '4', '5');
    DECLARE comment TEXT;

    -- Get the total number of ratings from the JSON array
    SET total_ratings = JSON_LENGTH(p_ratings);

    -- Iterate through each rating in the JSON array
    WHILE idx < total_ratings DO
        -- Extract the professional_id, rate, and comment from the JSON array
        SET professional_id = JSON_UNQUOTE(JSON_EXTRACT(p_ratings, CONCAT('$[', idx, '].professional_id')));
        SET rate = JSON_UNQUOTE(JSON_EXTRACT(p_ratings, CONCAT('$[', idx, '].rate')));
        SET comment = JSON_UNQUOTE(JSON_EXTRACT(p_ratings, CONCAT('$[', idx, '].comment')));

        -- Insert the rating into the 'rating' table
        INSERT INTO rating (professional_id, work_id, user_id, rate, comment, created_at, updated_at)
        VALUES (professional_id, p_work_id, p_user_id, rate, comment, NOW(), NOW());

        -- Increment the index to move to the next rating
        SET idx = idx + 1;
    END WHILE;
END$$

DELIMITER ;

10. For adding members after creating the project

DELIMITER $$

CREATE PROCEDURE AddPendingProfessional(
    IN p_logged_in_user_id BIGINT,
    IN p_user_id BIGINT,
    IN p_professional_id BIGINT,
    IN p_work_id BIGINT
)
BEGIN
    -- Declare variables for validation
    DECLARE record_exists INT DEFAULT 0;

    -- Condition 1: Check if the logged-in user is trying to add themselves
    IF p_logged_in_user_id = p_user_id THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot select yourself as a professional for the project.';
    END IF;

    -- Condition 2: Check if the record already exists in the table
    SELECT COUNT(*)
    INTO record_exists
    FROM pending_professional
    WHERE user_id = p_user_id AND work_id = p_work_id;

    IF record_exists > 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Selected Professional already exists in this project.';
    END IF;

    -- Insert the record into the pending_professional table
    INSERT INTO pending_professional (user_id, professional_id, work_id, professional_status, created_at, updated_at)
    VALUES (p_user_id, p_professional_id, p_work_id, 'pending', NOW(), NOW());

    -- Success message
    SELECT 'Professional added to pending list successfully' AS success_message;
END $$

DELIMITER ;

11. Stord Procedure to do the refer work section cutomer approval

DELIMITER //

CREATE PROCEDURE sp_accept_referral(IN p_referral_id INT)
BEGIN
    DECLARE v_work_id INT;
    DECLARE v_reference_id INT;
    DECLARE v_professional_id INT;
    DECLARE v_work_owner_id INT;
    DECLARE v_work_name VARCHAR(255);
    DECLARE v_referrer_name VARCHAR(255);
    DECLARE v_professional_user_id INT;
    
    -- Get referral details
    SELECT work_id, reference_id, professional_id 
    INTO v_work_id, v_reference_id, v_professional_id
    FROM referrals 
    WHERE referral_id = p_referral_id;
    
    -- Get work details
    SELECT user_id, name 
    INTO v_work_owner_id, v_work_name
    FROM work 
    WHERE work_id = v_work_id;
    
    -- Get professional's user ID
    SELECT user_id 
    INTO v_professional_user_id
    FROM professionals 
    WHERE professional_id = (SELECT professional_id FROM reference WHERE reference_id = v_reference_id);
    
    -- Get referrer's name (through multiple joins)
    SELECT users.name 
    INTO v_referrer_name
    FROM referrals 
    JOIN professionals ON referrals.professional_id = professionals.professional_id
    JOIN users ON professionals.user_id = users.id
    WHERE referral_id = p_referral_id;
    
    -- Start transaction
    START TRANSACTION;
    
    -- Update referral status
    UPDATE referrals 
    SET status = 'accepted',
        updated_at = NOW()
    WHERE referral_id = p_referral_id;
    
    -- Create pending professional record
    INSERT INTO pending_professional (
        user_id,
        professional_id,
        work_id,
        professional_status,
        created_at,
        updated_at
    ) VALUES (
        v_work_owner_id,
        (SELECT professional_id FROM reference WHERE reference_id = v_reference_id),
        v_work_id,
        'pending',
        NOW(),
        NOW()
    );
    
    -- Create notification
    INSERT INTO notifications (
        user_id,
        title,
        message,
        status,
        created_at,
        updated_at
    ) VALUES (
        v_professional_user_id,
        'Referred Work',
        CONCAT('You have been referred to the project ', v_work_name, ' by ', v_referrer_name, '. Visit the Project Requests Page.'),
        'unread',
        NOW(),
        NOW()
    );
    
    COMMIT;
    
END //

DELIMITER ;




* VIEWS *
---------

1. verify requests view

CREATE VIEW verify_requests AS
SELECT
    v.verify_id,
    v.user_id,
    v.nic_no,
    v.nic_front,
    v.nic_back,
    v.professional_type,   -- Include professional_type
    v.status,
    u.name as user_name,
    u.contact_no,
    u.address,
    u.email,
    -- Join the profile_picture table and select the image path
    pp.profile_pic   -- Assuming "profile_picture_path" is the column in the profile_picture table
FROM verify v
INNER JOIN users u ON v.user_id = u.user_id
LEFT JOIN profile_picture pp ON u.user_id = pp.user_id  -- Join the profile_picture table on user_id
WHERE v.status = "pending"
AND u.deleted = false


2. Professional Details View

This view will join the professionals, users, and profile_picture tables to consolidate the essential details about each professional.

CREATE VIEW professional_details AS
SELECT 
    p.professional_id, 
    p.user_id, 
    u.name, 
    p.work_location, 
    p.payment_min, 
    p.payment_max, 
    pp.profile_pic AS profile_picture_url
FROM professionals p
JOIN users u ON p.user_id = u.user_id
LEFT JOIN profile_picture pp ON u.user_id = pp.user_id;

3. Professional Ratings View

This view will aggregate and format the ratings for each professional, showing the average rating rounded to one decimal place. The average here is scaled to a 1-5 scale directly.

CREATE VIEW professional_ratings AS
SELECT 
    professional_id, 
    ROUND(AVG(CAST(rate AS DECIMAL)), 1) AS average_rating
FROM rating
GROUP BY professional_id;

4. User project creation view

CREATE VIEW view_user_projects AS
SELECT 
    work.*,
    users.name AS client_name,
    users.contact_no AS client_contact
FROM work
INNER JOIN users ON work.user_id = users.user_id
ORDER BY work.created_at DESC;

5. to get all ptofessional details for the search

CREATE VIEW all_professional_details AS
SELECT 
    p.professional_id,
    p.user_id,
    u.name AS user_name,
    p.type,
    p.availability,
    p.work_location,
    p.payment_min,
    p.payment_max,
    p.preferred_project_size,
    pp.profile_pic AS profile_picture_url,
    p.created_at,
    p.updated_at
FROM professionals p
JOIN users u ON p.user_id = u.user_id
LEFT JOIN profile_pictures pp ON p.user_id = pp.user_id
WHERE u.deleted = 0;

6. view teams with work view

CREATE VIEW `geoffryx_db`.`view_teams_with_work` AS
SELECT 
    t.team_id AS team_id,
    t.work_id AS work_id,
    w.name AS work_name,
    w.description AS work_description,
    w.status AS work_status,
    w.user_id AS work_owner_id
FROM 
    geoffryx_db.team t
JOIN 
    geoffryx_db.work w 
ON 
    (t.work_id = w.work_id);




* TRIGGERS *
------------



1. Create a Trigger to Prevent Users from Selecting Themselves

DELIMITER $$

CREATE TRIGGER before_insert_pending_professional
BEFORE INSERT ON pending_professional
FOR EACH ROW
BEGIN
    DECLARE professional_user_id BIGINT;

    -- Get the user_id of the professional
    SELECT user_id INTO professional_user_id
    FROM professionals
    WHERE professional_id = NEW.professional_id
    LIMIT 1;

    -- Compare with the project creator's user_id from the work table
    IF professional_user_id = (SELECT user_id FROM work WHERE work_id = NEW.work_id) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot select yourself as a professional for the project.';
    END IF;
END$$

DELIMITER ;





2. Create a Trigger to automatically create a record in team table when creating a record in work table

DELIMITER $$

CREATE TRIGGER after_work_insert
AFTER INSERT ON work
FOR EACH ROW
BEGIN
    -- Insert a new team record whenever a work record is created
    INSERT INTO team (work_id, created_at, updated_at) 
    VALUES (NEW.work_id, NOW(), NOW());
END$$

DELIMITER ;


3. This trigger automatically updates the status of a work record whenever a team member's status in the team_members table is updated.

DELIMITER $$

CREATE TRIGGER after_team_members_update
AFTER UPDATE ON team_members
FOR EACH ROW
BEGIN
    DECLARE total_members INT;
    DECLARE completed_members INT;
    DECLARE not_started_members INT;
    DECLARE work_id INT;

    -- Get the work_id for the team
    SELECT work_id INTO work_id
    FROM team
    WHERE team_id = NEW.team_id;

    -- Calculate the total number of team members
    SELECT COUNT(*) INTO total_members
    FROM team_members
    WHERE team_id = NEW.team_id;

    -- Calculate the number of team members with status 'completed'
    SELECT COUNT(*) INTO completed_members
    FROM team_members
    WHERE team_id = NEW.team_id AND status = 'completed';

    -- Calculate the number of team members with status 'not stated'
    SELECT COUNT(*) INTO not_started_members
    FROM team_members
    WHERE team_id = NEW.team_id AND status = 'not stated';

    -- Update the work status based on the counts
    IF total_members = completed_members THEN
        UPDATE work
        SET status = 'completed'
        WHERE work_id = work_id;
    ELSEIF total_members = not_started_members THEN
        UPDATE work
        SET status = 'not started'
        WHERE work_id = work_id;
    ELSE
        UPDATE work
        SET status = 'in progress'
        WHERE work_id = work_id;
    END IF;
END $$

DELIMITER ;

4. This trigger automatically updates the status of a team member record whenever a member task's status in the member_task table is updated.

DELIMITER $$

CREATE TRIGGER after_member_tasks_update
AFTER UPDATE ON member_tasks
FOR EACH ROW
BEGIN
    DECLARE total_tasks INT DEFAULT 0;
    DECLARE completed_tasks INT DEFAULT 0;
    DECLARE not_started_tasks INT DEFAULT 0;

    -- Calculate the total number of tasks for the team member
    SELECT COUNT(*) INTO total_tasks
    FROM member_tasks
    WHERE team_member_id = NEW.team_member_id;

    -- Calculate the number of tasks with status 'completed'
    SELECT COUNT(*) INTO completed_tasks
    FROM member_tasks
    WHERE team_member_id = NEW.team_member_id AND status = 'completed';

    -- Calculate the number of tasks with status 'not started'
    SELECT COUNT(*) INTO not_started_tasks
    FROM member_tasks
    WHERE team_member_id = NEW.team_member_id AND status = 'not started';

    -- Update the team member status based on the task statuses
    IF total_tasks = completed_tasks THEN
        UPDATE team_members
        SET status = 'completed'
        WHERE team_member_id = NEW.team_member_id;
    ELSEIF total_tasks = not_started_tasks THEN
        UPDATE team_members
        SET status = 'not started'
        WHERE team_member_id = NEW.team_member_id;
    ELSE
        UPDATE team_members
        SET status = 'in progress'
        WHERE team_member_id = NEW.team_member_id;
    END IF;
END $$

DELIMITER ;
