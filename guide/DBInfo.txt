* STORED PROCEDURES *
---------------------

1. To Change the User type to professional in user table, create a record in professional table and notification table and update the verify table status to Verified when accepting a verification request.

Procedure Name : AcceptVerification

BEGIN
    DECLARE user_id_param INT;
    DECLARE professional_type_param VARCHAR(255);

    -- Fetch user_id and professional_type from the verification request
    SELECT user_id, professional_type
    INTO user_id_param, professional_type_param
    FROM verify_requests
    WHERE verify_id = verify_id_param;

    -- Update the status of the verification request
    UPDATE verify_requests
    SET status = 'verified'
    WHERE verify_id = verify_id_param;

    -- Insert a notification for the user
    INSERT INTO notifications (
        user_id, 
        title, 
        message, 
        status, 
        created_at, 
        updated_at
    )
    VALUES (
        user_id_param, 
        'Account Verified', 
        'Your professional account request has been approved by Geoffryx. Welcome to Geoffryx professionals!', 
        'unread', 
        NOW(), 
        NOW()
    );

    -- Update the user's type in the users table
    UPDATE users
    SET user_type = 'professional'
    WHERE user_id = user_id_param;

    -- Insert a new record into the professionals table
    INSERT INTO professionals (
        user_id, 
        type, 
        availability, 
        work_location, 
        payment_min, 
        payment_max, 
        preferred_project_size, 
        created_at, 
        updated_at
    )
    VALUES (
        user_id_param, 
        professional_type_param, 
        'Available', 
        'anywhere', 
        20000000, 
        100000000, 
        'all', 
        NOW(), 
        NOW()
    );
END

2. Stored procedure for displaying professionals with loading their information

DELIMITER //

CREATE PROCEDURE LoadProfessionalDetails(IN prof_id INT)
BEGIN
    -- Fetch professional details including basic info and profile picture
    SELECT * FROM professional_details WHERE professional_id = prof_id;

    -- Fetch average ratings for the professional
    SELECT * FROM professional_ratings WHERE professional_id = prof_id;

    -- Fetch work history for the professional
    SELECT * FROM professional_work_history WHERE professional_id = prof_id;
END //

DELIMITER ;

3. Stored procedure to load all the professional information

DELIMITER //

CREATE PROCEDURE LoadAllProfessionals()
BEGIN
    SELECT p.professional_id, p.user_id, u.name, p.type, p.work_location, 
           pp.profile_pic AS profile_picture_url, r.average_rating
    FROM professionals p
    JOIN users u ON p.user_id = u.user_id
    LEFT JOIN profile_picture pp ON u.user_id = pp.user_id
    LEFT JOIN (
        SELECT professional_id, AVG(rate) AS average_rating
        FROM ratings
        GROUP BY professional_id
    ) r ON p.professional_id = r.professional_id;
END //

DELIMITER ;

4. stored procedure to create project woth selected professionals

DELIMITER $$

CREATE PROCEDURE create_project_with_professionals(
    IN p_user_id BIGINT,
    IN p_name VARCHAR(255),
    IN p_location VARCHAR(255),
    IN p_start_date DATE,
    IN p_end_date DATE,
    IN p_budget DECIMAL(10,2),
    IN p_description TEXT,
    IN p_professionals JSON
)
BEGIN
    DECLARE project_id BIGINT;

    -- Insert project details into the 'work' table
    INSERT INTO work (user_id, name, location, start_date, end_date, budget, description, created_at, updated_at)
    VALUES (p_user_id, p_name, p_location, p_start_date, p_end_date, p_budget, p_description, NOW(), NOW());

    SET project_id = LAST_INSERT_ID();

    -- Insert professionals into 'pending_professional' table
    INSERT INTO pending_professional (user_id, professional_id, work_id, professional_status, created_at, updated_at)
    SELECT p_user_id, JSON_UNQUOTE(JSON_EXTRACT(p_professionals, CONCAT('$[', idx.i, ']'))), project_id, 'pending', NOW(), NOW()
    FROM (SELECT 0 AS i UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5) idx
    WHERE JSON_UNQUOTE(JSON_EXTRACT(p_professionals, CONCAT('$[', idx.i, ']'))) IS NOT NULL;

END$$

DELIMITER ;




* VIEWS *
---------

CREATE VIEW verify_requests AS
SELECT
    v.verify_id,
    v.user_id,
    v.nic_no,
    v.nic_front,
    v.nic_back,
    v.professional_type,   -- Include professional_type
    v.status,
    u.name as user_name,
    u.contact_no,
    u.address,
    u.email,
    -- Join the profile_picture table and select the image path
    pp.profile_pic   -- Assuming "profile_picture_path" is the column in the profile_picture table
FROM verify v
INNER JOIN users u ON v.user_id = u.user_id
LEFT JOIN profile_picture pp ON u.user_id = pp.user_id  -- Join the profile_picture table on user_id
WHERE v.status = "pending"
AND u.deleted = false


2. Professional Details View

This view will join the professionals, users, and profile_picture tables to consolidate the essential details about each professional.

CREATE VIEW professional_details AS
SELECT 
    p.professional_id, 
    p.user_id, 
    u.name, 
    p.work_location, 
    p.payment_min, 
    p.payment_max, 
    pp.profile_pic AS profile_picture_url
FROM professionals p
JOIN users u ON p.user_id = u.user_id
LEFT JOIN profile_picture pp ON u.user_id = pp.user_id;

3. Professional Ratings View

This view will aggregate and format the ratings for each professional, showing the average rating rounded to one decimal place. The average here is scaled to a 1-5 scale directly.

CREATE VIEW professional_ratings AS
SELECT 
    professional_id, 
    ROUND(AVG(CAST(rate AS DECIMAL)), 1) AS average_rating
FROM rating
GROUP BY professional_id;

4. Professional Work History View

This view joins the work_history, work, and ratings tables to provide a comprehensive history for each professional, including project names, ratings, and descriptions.

CREATE VIEW professional_work_history AS
SELECT 
    wh.professional_id, 
    w.name AS project_name, 
    r.rate AS rating, 
    w.description, 
    w.location AS project_location
FROM work_history wh
JOIN work w ON wh.work_id = w.work_id
LEFT JOIN rating r ON wh.rating_id = r.rating_id;



* TRIGGERS *
------------

1. Create a Trigger to Prevent Users from Selecting Themselves

DELIMITER //
CREATE TRIGGER before_insert_pending_professional
BEFORE INSERT ON pending_professional
FOR EACH ROW
BEGIN
    IF NEW.user_id = NEW.professional_id THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot select yourself as a professional for the project.';
    END IF;
END;
//
DELIMITER ;
